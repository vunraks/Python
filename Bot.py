import asyncio
import subprocess
import logging
import random
import subprocess
import requests
import datetime
from aiogram import Bot, Dispatcher,types, F
from aiogram.filters import Command
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup

logging.basicConfig(level=logging.INFO)
bot = Bot(token="7786893238:AAHl5sld2FiimnNIEnM2p10dsrShO_WnFKY")
dp = Dispatcher()
WEATHER_API_KEY = "8396e7375c51bcb646be334d2d696fa5"
WEATHER_URL = "https://api.openweathermap.org/data/2.5/weather"



@dp.message(Command("start"))
async def cmd_name(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —è —Ç–µ—Å—Ç –±–æ—Ç")

@dp.message(Command("info"))
async def cmd_name(message: Message):
    await message.reply("–£ –º–µ–Ω—è –µ—Å—Ç—å —Ç–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã - \n/start, \n/info, \n/who, \n/weather, \n/time, \n/name")

@dp.message(Command("who"))
async def cmd_name(message: Message):
    await message.reply("–ù–∏–∫–∏—Ç–∞")  



btn_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–•–æ—Ä—Ä–æ—Ä")],
        [KeyboardButton(text="–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è")],
        [KeyboardButton(text="–ö–æ–º–µ–¥–∏–∏")],
        [KeyboardButton(text="–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="–¢—Ä–∏–ª–ª–µ—Ä—ã")]
    ],
    resize_keyboard=True
)

horror = ["https://www.kinopoisk.ru/film/977288/","https://www.kinopoisk.ru/series/915196/","https://www.kinopoisk.ru/film/195524/"]
adventure = ["https://www.kinopoisk.ru/film/5078983/","https://www.kinopoisk.ru/film/522941/","https://www.kinopoisk.ru/film/427076/"]
comedy = ["https://www.kinopoisk.ru/film/8124/","https://www.kinopoisk.ru/film/42664/","https://www.kinopoisk.ru/film/6039/"]
fantastic = ["https://www.kinopoisk.ru/film/251733/","https://www.kinopoisk.ru/film/258687/","https://www.kinopoisk.ru/film/447301/"]
triller = ["https://www.kinopoisk.ru/film/397667/","https://www.kinopoisk.ru/film/361/","https://www.kinopoisk.ru/series/838050/"]


@dp.message(Command("films"))
async def cmd_name(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä", reply_markup=btn_keyboard)

@dp.message(lambda message: message.text == "–•–æ—Ä—Ä–æ—Ä")
async def show_horror(message: Message):
    await message.reply("123" + random.choice(horror))

@dp.message(lambda message: message.text == "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è")
async def show_adventure(message: Message):
    await message.reply("212314" + random.choice(adventure))

@dp.message(lambda message: message.text == "–ö–æ–º–µ–¥–∏–∏")
async def show_comedy(message: Message):
    await message.reply("2314" + random.choice(comedy))

@dp.message(lambda message: message.text == "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞")
async def show_fantastic(message: Message):
    await message.reply("21234" + random.choice(fantastic))

@dp.message(lambda message: message.text == "–¢—Ä–∏–ª–ª–µ—Ä—ã")
async def show_triller(message: Message):
    await message.reply("–≤–æ—Ç –µ—Å—Ç—å —Ç–∞–∫–∏–µ" + random.choice(triller))







@dp.message(Command("name"))
async def cmd_name(message: Message):  
    args = message.text.split(maxsplit=1)
    if len(args) > 1:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{args[1]}</b>", parse_mode="HTML") 
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–≤–æ–µ –∏–º—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /name.") 



@dp.message(Command("special_buttons"))
async def cmd_special_buttons(message: types.Message):
    kb = [
        [types.KeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)],
        [types.KeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", request_poll=types.KeyboardButtonPollType(type='quiz'))],
    ] 
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=keyboard)


@dp.message(lambda message: message.text == "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")
async def send_quiz(message: types.Message):
    question = "–ö–∞–∫–æ–π —Å–∞–º—ã –±–æ–ª—å—à–æ–π –æ–∫–µ–∞–Ω –Ω–∞ –ó–µ–º–ª–µ?"
    options = ["–ê—Ç–ª–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π", "–ò–Ω–¥–∏–π—Å–∫–∏–π", "–¢–∏—Ö–∏–π", "–°–µ–≤–µ—Ä–Ω–æ –õ–µ–¥–æ–≤–∏—Ç—ã–π"]  
    correct_option_id = 2  

    await bot.send_poll(
        chat_id=message.chat.id,
        question=question,
        options=options,
        type='quiz',
        correct_option_id=correct_option_id,
        is_anonymous=False
    )
    

@dp.message(Command("game"))
async def launch_game(message: Message):
    def run_game():
        try:
            subprocess.Popen(r'D:\qBittorrent\The Binding of Isaac Rebirth\isaac-ng.exe')
            return "–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞"
        except FileExistsError:
            return "–ü—É—Ç—å –∫ –∏–≥—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
    loop = asyncio.get_event_loop()
    response = await loop.run_in_executor(None, run_game)

    await message.reply(response)    



# @dp.message(lambda message: message.text == "–ü–æ–≥–æ–¥–∞") 
# async def start_command(message: Message):
#     await message.answer(
#         "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –æ –ø–æ–≥–æ–¥–µ!"
#     )
# @dp.message(F.text)
# async def get_weather(message: Message):
#     city = message.text.strip()
#     try:
#         response = requests.get(WEATHER_URL, params={
#             'q': city,
#             'appid': WEATHER_API_KEY,
#             'units': 'metric',
#             'lang': 'ru'
#         })
#         data = response.json()  
#         logging.info(f"API response: {data}")  
#         if data["cod"] == 200:  
#             city_name = data["name"]
#             temp = data["main"]["temp"]
#             weather_desc = data["weather"][0]["description"]
#             wind_speed = data["wind"]["speed"]
#             weather_info = (
#                 f"üåÜ <b>–ì–æ—Ä–æ–¥:</b> {city_name}\n"
#                 f"üå° <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {temp}¬∞C\n"
#                 f"‚òÅ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {weather_desc.capitalize()}\n"
#                 f"üí® <b>–í–µ—Ç–µ—Ä:</b> {wind_speed} –º/—Å"
#             )
#             await message.answer(weather_info, parse_mode="HTML")
#         else:
#             await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞: {e}")
#         await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
# async def main():
#     await dp.start_polling()


# @dp.message(Command("button"))
# async def cmd_name(message: Message):  
#     kb = [
#         [types.KeyboardButton(text="–°—Ç–∞—Ä—Ç")],
#         [types.KeyboardButton(text="–ò–Ω—Ñ–æ")],
#         [types.KeyboardButton(text="–í—Ä–µ–º—è")],
#         [types.KeyboardButton(text="–ü–æ–≥–æ–¥–∞")],
#         [types.KeyboardButton(text="–°—Ç–æ–ø")]
#     ]         
#     keyboard = types.ReplyKeyboardMarkup(keyboard=kb)
#     await message.answer("–ö–∞–∫—É—é –∫–Ω–æ–ø–∫—É –≤—ã –≤—ã–±—Ä–∞–ª–∏?", reply_markup=keyboard )

# @dp.message(lambda message: message.text == "–°—Ç–∞—Ä—Ç")
# async def firs_btn(message: Message):
#     await message.reply("–ü—Ä–∏–≤–µ—Ç, —è —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–Ω—Ñ–æ –∏ –ø–æ–ª—É—á–∏ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!")

# @dp.message(lambda message: message.text == "–ò–Ω—Ñ–æ")  
# async def second_btn(message: Message):
#     await message.reply("–£ –º–µ–Ω—è –µ—Å—Ç—å —Ç–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã - \n/start \n/info \n/who \n/weather \n/time \n/name")

# @dp.message(lambda message: message.text == "–í—Ä–µ–º—è")

# @dp.message(F.text == "/time")
# async def time_command(message: Message):
#     now = datetime.now().strftime('%H:%M:%S___%d:%m:%Y')
#     await message.answer(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç–∞ –≤ –ê–ª–º–∞—Ç—ã: {now}")    
# async def main():
#     await bot.delete_webhook(drop_pending_updates=True)  
#     await dp.start_polling(bot)  












    



















async def main():
    await dp.start_polling(bot)

if __name__== "__main__" :
   asyncio.run(main())

# engine = pyttsx3.init()

# engine.setProperty("rate",150)
# engine.setProperty("volume",0.9)

# engine.say("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å")

# engine.runAndWait()





    


# @dp.message()
# async def echo_message(message: types.Message):
#     await message.answer(f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}, —Ç–≤–æ–π —Ç–µ–∫—Å—Ç: \n{message.text}")  



    





# @dp.message(F.content_type == "animation")
# async def echo_gif(message: Message):
#     await message.reply_animation(message.animation.file_id)













#–í–∞—Ä–∏–∞–Ω—Ç 1
@dp.message(Command("nname"))
async def any_message(message: types.Message):
    await message.answer("Hello, <b>Nikita</b>!", parse_mode="HTML")
    await message.answer("Hello, *Nikita*\!", parse_mode="MardownV2")


# #–í–∞—Ä–∏–∞–Ω—Ç 2
# @dp.message()
# async def echo_message(message: types.Message):
#     await message.answer(f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}, <b>{message.text}</b>!", parse_mode="HTML")
#     await message.answer(f"Hello, {message.from_user.first_name}, *{message.text}*\!", parse_mode="MardownV2")





